/* eslint-disable */

const peggyParser: { parse: any; SyntaxError: any; DefaultTracer?: any } = // Generated by Peggy 3.0.2.
  //
  // https://peggyjs.org/
  // @ts-ignore
  (function () {
    // @ts-ignore
    'use strict';

    // @ts-ignore
    function peg$subclass(child, parent) {
      // @ts-ignore
      function C() {
        this.constructor = child;
      }
      // @ts-ignore
      C.prototype = parent.prototype;
      // @ts-ignore
      child.prototype = new C();
    }

    // @ts-ignore
    function peg$SyntaxError(message, expected, found, location) {
      // @ts-ignore
      var self = Error.call(this, message);
      // istanbul ignore next Check is a necessary evil to support older environments
      // @ts-ignore
      if (Object.setPrototypeOf) {
        // @ts-ignore
        Object.setPrototypeOf(self, peg$SyntaxError.prototype);
      }
      // @ts-ignore
      self.expected = expected;
      // @ts-ignore
      self.found = found;
      // @ts-ignore
      self.location = location;
      // @ts-ignore
      self.name = 'SyntaxError';
      // @ts-ignore
      return self;
    }

    // @ts-ignore
    peg$subclass(peg$SyntaxError, Error);

    // @ts-ignore
    function peg$padEnd(str, targetLength, padString) {
      // @ts-ignore
      padString = padString || ' ';
      // @ts-ignore
      if (str.length > targetLength) {
        return str;
      }
      // @ts-ignore
      targetLength -= str.length;
      // @ts-ignore
      padString += padString.repeat(targetLength);
      // @ts-ignore
      return str + padString.slice(0, targetLength);
    }

    // @ts-ignore
    peg$SyntaxError.prototype.format = function (sources) {
      // @ts-ignore
      var str = 'Error: ' + this.message;
      // @ts-ignore
      if (this.location) {
        // @ts-ignore
        var src = null;
        // @ts-ignore
        var k;
        // @ts-ignore
        for (k = 0; k < sources.length; k++) {
          // @ts-ignore
          if (sources[k].source === this.location.source) {
            // @ts-ignore
            src = sources[k].text.split(/\r\n|\n|\r/g);
            // @ts-ignore
            break;
          }
        }
        // @ts-ignore
        var s = this.location.start;
        // @ts-ignore
        var offset_s =
          this.location.source && typeof this.location.source.offset === 'function'
            ? // @ts-ignore
              this.location.source.offset(s)
            : // @ts-ignore
              s;
        // @ts-ignore
        var loc = this.location.source + ':' + offset_s.line + ':' + offset_s.column;
        // @ts-ignore
        if (src) {
          // @ts-ignore
          var e = this.location.end;
          // @ts-ignore
          var filler = peg$padEnd('', offset_s.line.toString().length, ' ');
          // @ts-ignore
          var line = src[s.line - 1];
          // @ts-ignore
          var last = s.line === e.line ? e.column : line.length + 1;
          // @ts-ignore
          var hatLen = last - s.column || 1;
          // @ts-ignore
          str +=
            '\n --> ' +
            loc +
            '\n' +
            // @ts-ignore
            filler +
            ' |\n' +
            // @ts-ignore
            offset_s.line +
            ' | ' +
            line +
            '\n' +
            // @ts-ignore
            filler +
            ' | ' +
            peg$padEnd('', s.column - 1, ' ') +
            // @ts-ignore
            peg$padEnd('', hatLen, '^');
          // @ts-ignore
        } else {
          // @ts-ignore
          str += '\n at ' + loc;
        }
      }
      // @ts-ignore
      return str;
    };

    // @ts-ignore
    peg$SyntaxError.buildMessage = function (expected, found) {
      // @ts-ignore
      var DESCRIBE_EXPECTATION_FNS = {
        // @ts-ignore
        literal: function (expectation) {
          // @ts-ignore
          return '"' + literalEscape(expectation.text) + '"';
        },

        // @ts-ignore
        class: function (expectation) {
          // @ts-ignore
          var escapedParts = expectation.parts.map(function (part) {
            // @ts-ignore
            return Array.isArray(part)
              ? // @ts-ignore
                classEscape(part[0]) + '-' + classEscape(part[1])
              : // @ts-ignore
                classEscape(part);
          });

          // @ts-ignore
          return '[' + (expectation.inverted ? '^' : '') + escapedParts.join('') + ']';
        },

        // @ts-ignore
        any: function () {
          // @ts-ignore
          return 'any character';
        },

        // @ts-ignore
        end: function () {
          // @ts-ignore
          return 'end of input';
        },

        // @ts-ignore
        other: function (expectation) {
          // @ts-ignore
          return expectation.description;
        },
      };

      // @ts-ignore
      function hex(ch) {
        // @ts-ignore
        return ch.charCodeAt(0).toString(16).toUpperCase();
      }

      // @ts-ignore
      function literalEscape(s) {
        // @ts-ignore
        return (
          s
            // @ts-ignore
            .replace(/\\/g, '\\\\')
            // @ts-ignore
            .replace(/"/g, '\\"')
            // @ts-ignore
            .replace(/\0/g, '\\0')
            // @ts-ignore
            .replace(/\t/g, '\\t')
            // @ts-ignore
            .replace(/\n/g, '\\n')
            // @ts-ignore
            .replace(/\r/g, '\\r')
            // @ts-ignore
            .replace(/[\x00-\x0F]/g, function (ch) {
              return '\\x0' + hex(ch);
            })
            // @ts-ignore
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
              return '\\x' + hex(ch);
            })
        );
      }

      // @ts-ignore
      function classEscape(s) {
        // @ts-ignore
        return (
          s
            // @ts-ignore
            .replace(/\\/g, '\\\\')
            // @ts-ignore
            .replace(/\]/g, '\\]')
            // @ts-ignore
            .replace(/\^/g, '\\^')
            // @ts-ignore
            .replace(/-/g, '\\-')
            // @ts-ignore
            .replace(/\0/g, '\\0')
            // @ts-ignore
            .replace(/\t/g, '\\t')
            // @ts-ignore
            .replace(/\n/g, '\\n')
            // @ts-ignore
            .replace(/\r/g, '\\r')
            // @ts-ignore
            .replace(/[\x00-\x0F]/g, function (ch) {
              return '\\x0' + hex(ch);
            })
            // @ts-ignore
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
              return '\\x' + hex(ch);
            })
        );
      }

      // @ts-ignore
      function describeExpectation(expectation) {
        // @ts-ignore
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
      }

      // @ts-ignore
      function describeExpected(expected) {
        // @ts-ignore
        var descriptions = expected.map(describeExpectation);
        // @ts-ignore
        var i, j;

        // @ts-ignore
        descriptions.sort();

        // @ts-ignore
        if (descriptions.length > 0) {
          // @ts-ignore
          for (i = 1, j = 1; i < descriptions.length; i++) {
            // @ts-ignore
            if (descriptions[i - 1] !== descriptions[i]) {
              // @ts-ignore
              descriptions[j] = descriptions[i];
              // @ts-ignore
              j++;
            }
          }
          // @ts-ignore
          descriptions.length = j;
        }

        // @ts-ignore
        switch (descriptions.length) {
          // @ts-ignore
          case 1:
            // @ts-ignore
            return descriptions[0];

          // @ts-ignore
          case 2:
            // @ts-ignore
            return descriptions[0] + ' or ' + descriptions[1];

          // @ts-ignore
          default:
            // @ts-ignore
            return (
              descriptions.slice(0, -1).join(', ') +
              // @ts-ignore
              ', or ' +
              // @ts-ignore
              descriptions[descriptions.length - 1]
            );
        }
      }

      // @ts-ignore
      function describeFound(found) {
        // @ts-ignore
        return found ? '"' + literalEscape(found) + '"' : 'end of input';
      }

      // @ts-ignore
      return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.';
    };

    // @ts-ignore
    function peg$parse(input, options) {
      // @ts-ignore
      options = options !== undefined ? options : {};

      // @ts-ignore
      var peg$FAILED = {};
      // @ts-ignore
      var peg$source = options.grammarSource;

      // @ts-ignore
      var peg$startRuleFunctions = { Start: peg$parseStart };
      // @ts-ignore
      var peg$startRuleFunction = peg$parseStart;

      // @ts-ignore
      var peg$c0 = 'v';
      var peg$c1 = '{';
      var peg$c2 = '}';
      var peg$c3 = 'xschem';
      var peg$c4 = 'version=';
      var peg$c5 = 'file_version=';
      var peg$c6 = 'S';
      var peg$c7 = 'V';
      var peg$c8 = 'G';
      var peg$c9 = 'E';
      var peg$c10 = 'K';
      var peg$c11 = '\\';
      var peg$c12 = '=';
      var peg$c13 = '"';
      var peg$c14 = '\\\\"';
      var peg$c15 = 'L';
      var peg$c16 = 'B';
      var peg$c17 = 'P';
      var peg$c18 = 'A';
      var peg$c19 = 'T';
      var peg$c20 = 'N';
      var peg$c21 = 'C';
      var peg$c22 = '[';
      var peg$c23 = ']';
      var peg$c24 = '-';
      var peg$c25 = '.';

      var peg$r0 = /^[0-9.]/;
      var peg$r1 = /^[^}]/;
      var peg$r2 = /^[^\\{}]/;
      var peg$r3 = /^[^ \r\n\t;"\\=}]/;
      var peg$r4 = /^[^ \r\n\t{}]/;
      var peg$r5 = /^[^\\"]/;
      var peg$r6 = /^[0-9]/;
      var peg$r7 = /^[ \t\n\r]/;

      var peg$e0 = peg$literalExpectation('v', false);
      var peg$e1 = peg$literalExpectation('{', false);
      var peg$e2 = peg$literalExpectation('}', false);
      var peg$e3 = peg$literalExpectation('xschem', false);
      var peg$e4 = peg$literalExpectation('version=', false);
      var peg$e5 = peg$literalExpectation('file_version=', false);
      var peg$e6 = peg$classExpectation([['0', '9'], '.'], false, false);
      var peg$e7 = peg$classExpectation(['}'], true, false);
      var peg$e8 = peg$literalExpectation('S', false);
      var peg$e9 = peg$literalExpectation('V', false);
      var peg$e10 = peg$literalExpectation('G', false);
      var peg$e11 = peg$literalExpectation('E', false);
      var peg$e12 = peg$literalExpectation('K', false);
      var peg$e13 = peg$literalExpectation('\\', false);
      var peg$e14 = peg$classExpectation(['\\', '{', '}'], true, false);
      var peg$e15 = peg$literalExpectation('=', false);
      var peg$e16 = peg$classExpectation(
        [' ', '\r', '\n', '\t', ';', '"', '\\', '=', '}'],
        true,
        false,
      );
      var peg$e17 = peg$classExpectation([' ', '\r', '\n', '\t', '{', '}'], true, false);
      var peg$e18 = peg$literalExpectation('"', false);
      var peg$e19 = peg$classExpectation(['\\', '"'], true, false);
      var peg$e20 = peg$literalExpectation('\\\\"', false);
      var peg$e21 = peg$anyExpectation();
      var peg$e22 = peg$literalExpectation('L', false);
      var peg$e23 = peg$literalExpectation('B', false);
      var peg$e24 = peg$otherExpectation('polygon');
      var peg$e25 = peg$literalExpectation('P', false);
      var peg$e26 = peg$literalExpectation('A', false);
      var peg$e27 = peg$literalExpectation('T', false);
      var peg$e28 = peg$literalExpectation('N', false);
      var peg$e29 = peg$literalExpectation('C', false);
      var peg$e30 = peg$literalExpectation('[', false);
      var peg$e31 = peg$literalExpectation(']', false);
      var peg$e32 = peg$literalExpectation('-', false);
      var peg$e33 = peg$classExpectation([['0', '9']], false, false);
      var peg$e34 = peg$literalExpectation('.', false);
      var peg$e35 = peg$classExpectation([' ', '\t', '\n', '\r'], false, false);
      // @ts-ignore

      var peg$f0 = function (version, objects) {
        // @ts-ignore
        return [...(version ? [version] : []), ...objects];
      }; // @ts-ignore

      var peg$f1 = function (version, license) {
        // @ts-ignore
        return { type: 'Version', ...version, license };
      }; // @ts-ignore

      var peg$f2 = function (version, fileVersion) {
        // @ts-ignore
        return { version, fileVersion };
      }; // @ts-ignore

      var peg$f3 = function (version) {
        // @ts-ignore
        return text();
      }; // @ts-ignore

      var peg$f4 = function (text) {
        // @ts-ignore
        return text.join('');
      }; // @ts-ignore

      var peg$f5 = function (obj) {
        // @ts-ignore
        return obj;
      }; // @ts-ignore

      var peg$f6 = function (content) {
        // @ts-ignore
        return { type: 'Spice', content };
      }; // @ts-ignore

      var peg$f7 = function (content) {
        // @ts-ignore
        return { type: 'Verilog', content };
      }; // @ts-ignore

      var peg$f8 = function (content) {
        // @ts-ignore
        return { type: 'VHDL', content };
      }; // @ts-ignore

      var peg$f9 = function (content) {
        // @ts-ignore
        return { type: 'TEDAx', content };
      }; // @ts-ignore

      var peg$f10 = function (properties) {
        // @ts-ignore
        return { type: 'GlobalProperties', properties };
      }; // @ts-ignore

      var peg$f11 = function (content) {
        // @ts-ignore
        return content.join('');
      }; // @ts-ignore

      var peg$f12 = function (value) {
        // @ts-ignore
        return value;
      }; // @ts-ignore

      var peg$f13 = function () {
        // @ts-ignore
        return text();
      }; // @ts-ignore

      var peg$f14 = function (pairs) {
        // @ts-ignore
        return Object.fromEntries(
          pairs ? [pairs[0]].concat(pairs[1].map((p) => p[1])) : [],
        ) as Record<string, string>;
      }; // @ts-ignore

      var peg$f15 = function (key, value) {
        // @ts-ignore
        return [key, value];
      }; // @ts-ignore

      var peg$f16 = function (key) {
        // @ts-ignore
        return [];
      }; // @ts-ignore

      var peg$f17 = function () {
        // @ts-ignore
        return text();
      }; // @ts-ignore

      var peg$f18 = function (str) {
        // @ts-ignore
        return str.replace(/\\./g, (m) => m[1]);
      }; // @ts-ignore

      var peg$f19 = function (chars) {
        // @ts-ignore
        return chars.join('');
      }; // @ts-ignore

      var peg$f20 = function (string) {
        // @ts-ignore
        return string.join('');
      }; // @ts-ignore

      var peg$f21 = function () {
        // @ts-ignore
        return text();
      }; // @ts-ignore

      var peg$f22 = function () {
        // @ts-ignore
        return '\\"';
      }; // @ts-ignore

      var peg$f23 = function (value) {
        // @ts-ignore
        return value;
      }; // @ts-ignore

      var peg$f24 = function (layer, x1, y1, x2, y2, props) {
        // @ts-ignore
        return {
          // @ts-ignore
          type: 'Line',
          // @ts-ignore
          layer,
          // @ts-ignore
          x1,
          // @ts-ignore
          y1,
          // @ts-ignore
          x2,
          // @ts-ignore
          y2,
          // @ts-ignore
          properties: props,
        };
      }; // @ts-ignore

      var peg$f25 = function (layer, x1, y1, x2, y2, props) {
        // @ts-ignore
        return {
          // @ts-ignore
          type: 'Rectangle',
          // @ts-ignore
          layer,
          // @ts-ignore
          x1,
          // @ts-ignore
          y1,
          // @ts-ignore
          x2,
          // @ts-ignore
          y2,
          // @ts-ignore
          properties: props,
        };
      }; // @ts-ignore

      var peg$f26 = function (layer, pointCount, points, props) {
        // @ts-ignore
        return {
          // @ts-ignore
          type: 'Polygon',
          // @ts-ignore
          layer,
          // @ts-ignore
          points,
          // @ts-ignore
          properties: props,
        };
      }; // @ts-ignore

      var peg$f27 = function (first, rest) {
        // @ts-ignore
        return [first].concat(rest.map((r) => r[1]));
      }; // @ts-ignore

      var peg$f28 = function (x, y) {
        // @ts-ignore
        return { x, y };
      }; // @ts-ignore

      var peg$f29 = function (layer, centerX, centerY, radius, startAngle, sweepAngle, props) {
        // @ts-ignore
        return {
          // @ts-ignore
          type: 'Arc',
          // @ts-ignore
          layer,
          // @ts-ignore
          centerX,
          // @ts-ignore
          centerY,
          // @ts-ignore
          radius,
          // @ts-ignore
          startAngle,
          // @ts-ignore
          sweepAngle,
          // @ts-ignore
          properties: props,
        };
      }; // @ts-ignore

      var peg$f30 = function (text, x, y, rotation, mirror, hSize, vSize, props) {
        // @ts-ignore
        return {
          // @ts-ignore
          type: 'Text',
          // @ts-ignore
          text,
          // @ts-ignore
          x,
          // @ts-ignore
          y,
          // @ts-ignore
          rotation,
          // @ts-ignore
          mirror,
          // @ts-ignore
          hSize,
          // @ts-ignore
          vSize,
          // @ts-ignore
          properties: props,
        };
      }; // @ts-ignore

      var peg$f31 = function (x1, y1, x2, y2, props) {
        // @ts-ignore
        return {
          // @ts-ignore
          type: 'Wire',
          // @ts-ignore
          x1,
          // @ts-ignore
          y1,
          // @ts-ignore
          x2,
          // @ts-ignore
          y2,
          // @ts-ignore
          properties: props,
        };
      }; // @ts-ignore

      var peg$f32 = function (reference, x, y, rotation, flip, props) {
        // @ts-ignore
        return {
          // @ts-ignore
          type: 'Component',
          // @ts-ignore
          symbolReference: reference,
          // @ts-ignore
          x,
          // @ts-ignore
          y,
          // @ts-ignore
          rotation,
          // @ts-ignore
          flip,
          // @ts-ignore
          properties: props,
        };
      }; // @ts-ignore

      var peg$f33 = function (symbol) {
        // @ts-ignore
        return { type: 'EmbeddedSymbol', symbol };
      }; // @ts-ignore

      var peg$f34 = function (n) {
        // @ts-ignore
        return parseFloat(n);
      }; // @ts-ignore

      var peg$f35 = function (n) {
        // @ts-ignore
        return parseFloat(n);
      }; // @ts-ignore

      var peg$f36 = function () {
        // @ts-ignore
        return parseFloat(text());
      }; // @ts-ignore

      var peg$f37 = function () {
        // @ts-ignore
        return parseInt(text(), 10);
      };
      // @ts-ignore
      var peg$currPos = 0;
      // @ts-ignore
      var peg$savedPos = 0;
      // @ts-ignore
      var peg$posDetailsCache = [{ line: 1, column: 1 }];
      // @ts-ignore
      var peg$maxFailPos = 0;
      // @ts-ignore
      var peg$maxFailExpected = [];
      // @ts-ignore
      var peg$silentFails = 0;

      // @ts-ignore
      var peg$result;

      // @ts-ignore
      if ('startRule' in options) {
        // @ts-ignore
        if (!(options.startRule in peg$startRuleFunctions)) {
          // @ts-ignore
          throw new Error('Can\'t start parsing from rule "' + options.startRule + '".');
        }

        // @ts-ignore
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
      }

      // @ts-ignore
      function text() {
        // @ts-ignore
        return input.substring(peg$savedPos, peg$currPos);
      }

      // @ts-ignore
      function offset() {
        // @ts-ignore
        return peg$savedPos;
      }

      // @ts-ignore
      function range() {
        // @ts-ignore
        return {
          // @ts-ignore
          source: peg$source,
          // @ts-ignore
          start: peg$savedPos,
          // @ts-ignore
          end: peg$currPos,
        };
      }

      // @ts-ignore
      function location() {
        // @ts-ignore
        return peg$computeLocation(peg$savedPos, peg$currPos);
      }

      // @ts-ignore
      function expected(description, location) {
        // @ts-ignore
        location =
          location !== undefined
            ? // @ts-ignore
              location
            : // @ts-ignore
              peg$computeLocation(peg$savedPos, peg$currPos);

        // @ts-ignore
        throw peg$buildStructuredError(
          // @ts-ignore
          [peg$otherExpectation(description)],
          // @ts-ignore
          input.substring(peg$savedPos, peg$currPos),
          // @ts-ignore
          location,
        );
      }

      // @ts-ignore
      function error(message, location) {
        // @ts-ignore
        location =
          location !== undefined
            ? // @ts-ignore
              location
            : // @ts-ignore
              peg$computeLocation(peg$savedPos, peg$currPos);

        // @ts-ignore
        throw peg$buildSimpleError(message, location);
      }

      // @ts-ignore
      function peg$literalExpectation(text, ignoreCase) {
        // @ts-ignore
        return { type: 'literal', text: text, ignoreCase: ignoreCase };
      }

      // @ts-ignore
      function peg$classExpectation(parts, inverted, ignoreCase) {
        // @ts-ignore
        return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase };
      }

      // @ts-ignore
      function peg$anyExpectation() {
        // @ts-ignore
        return { type: 'any' };
      }

      // @ts-ignore
      function peg$endExpectation() {
        // @ts-ignore
        return { type: 'end' };
      }

      // @ts-ignore
      function peg$otherExpectation(description) {
        // @ts-ignore
        return { type: 'other', description: description };
      }

      // @ts-ignore
      function peg$computePosDetails(pos) {
        // @ts-ignore
        var details = peg$posDetailsCache[pos];
        // @ts-ignore
        var p;

        // @ts-ignore
        if (details) {
          // @ts-ignore
          return details;
          // @ts-ignore
        } else {
          // @ts-ignore
          p = pos - 1;
          // @ts-ignore
          while (!peg$posDetailsCache[p]) {
            // @ts-ignore
            p--;
          }

          // @ts-ignore
          details = peg$posDetailsCache[p];
          // @ts-ignore
          details = {
            // @ts-ignore
            line: details.line,
            // @ts-ignore
            column: details.column,
          };

          // @ts-ignore
          while (p < pos) {
            // @ts-ignore
            if (input.charCodeAt(p) === 10) {
              // @ts-ignore
              details.line++;
              // @ts-ignore
              details.column = 1;
              // @ts-ignore
            } else {
              // @ts-ignore
              details.column++;
            }

            // @ts-ignore
            p++;
          }

          // @ts-ignore
          peg$posDetailsCache[pos] = details;

          // @ts-ignore
          return details;
        }
      }

      // @ts-ignore
      function peg$computeLocation(startPos, endPos, offset) {
        // @ts-ignore
        var startPosDetails = peg$computePosDetails(startPos);
        // @ts-ignore
        var endPosDetails = peg$computePosDetails(endPos);

        // @ts-ignore
        var res = {
          // @ts-ignore
          source: peg$source,
          // @ts-ignore
          start: {
            // @ts-ignore
            offset: startPos,
            // @ts-ignore
            line: startPosDetails.line,
            // @ts-ignore
            column: startPosDetails.column,
          },
          // @ts-ignore
          end: {
            // @ts-ignore
            offset: endPos,
            // @ts-ignore
            line: endPosDetails.line,
            // @ts-ignore
            column: endPosDetails.column,
          },
        };
        // @ts-ignore
        if (offset && peg$source && typeof peg$source.offset === 'function') {
          // @ts-ignore
          res.start = peg$source.offset(res.start);
          // @ts-ignore
          res.end = peg$source.offset(res.end);
        }
        // @ts-ignore
        return res;
      }

      // @ts-ignore
      function peg$fail(expected) {
        // @ts-ignore
        if (peg$currPos < peg$maxFailPos) {
          return;
        }

        // @ts-ignore
        if (peg$currPos > peg$maxFailPos) {
          // @ts-ignore
          peg$maxFailPos = peg$currPos;
          // @ts-ignore
          peg$maxFailExpected = [];
        }

        // @ts-ignore
        peg$maxFailExpected.push(expected);
      }

      // @ts-ignore
      function peg$buildSimpleError(message, location) {
        // @ts-ignore
        return new peg$SyntaxError(message, null, null, location);
      }

      // @ts-ignore
      function peg$buildStructuredError(expected, found, location) {
        // @ts-ignore
        return new peg$SyntaxError(
          // @ts-ignore
          peg$SyntaxError.buildMessage(expected, found),
          // @ts-ignore
          expected,
          // @ts-ignore
          found,
          // @ts-ignore
          location,
        );
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseStart() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parse_();
        // @ts-ignore
        s2 = peg$parseVersionObject();
        // @ts-ignore
        if (s2 === peg$FAILED) {
          // @ts-ignore
          s2 = null;
        }
        // @ts-ignore
        s3 = peg$parse_();
        // @ts-ignore
        s4 = [];
        // @ts-ignore
        s5 = peg$parseObjectDefinition();
        // @ts-ignore
        while (s5 !== peg$FAILED) {
          // @ts-ignore
          s4.push(s5);
          // @ts-ignore
          s5 = peg$parseObjectDefinition();
        }
        // @ts-ignore
        peg$savedPos = s0;
        // @ts-ignore
        s0 = peg$f0(s2, s4);

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseVersionObject() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 118) {
          // @ts-ignore
          s1 = peg$c0;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 123) {
            // @ts-ignore
            s3 = peg$c1;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s3 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e1);
            }
          }
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parse_();
            // @ts-ignore
            s5 = peg$parseVersionString();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s6 = peg$parse_();
              // @ts-ignore
              s7 = peg$parseLicenseText();
              // @ts-ignore
              s8 = peg$parse_();
              // @ts-ignore
              if (input.charCodeAt(peg$currPos) === 125) {
                // @ts-ignore
                s9 = peg$c2;
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
              } else {
                // @ts-ignore
                s9 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              // @ts-ignore
              if (s9 !== peg$FAILED) {
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s0 = peg$f1(s5, s7);
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseVersionString() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 6) === peg$c3) {
          // @ts-ignore
          s1 = peg$c3;
          // @ts-ignore
          peg$currPos += 6;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e3);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          if (input.substr(peg$currPos, 8) === peg$c4) {
            // @ts-ignore
            s3 = peg$c4;
            // @ts-ignore
            peg$currPos += 8;
            // @ts-ignore
          } else {
            // @ts-ignore
            s3 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e4);
            }
          }
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseVersionNumber();
            // @ts-ignore
            if (s4 !== peg$FAILED) {
              // @ts-ignore
              s5 = peg$parse_();
              // @ts-ignore
              if (input.substr(peg$currPos, 13) === peg$c5) {
                // @ts-ignore
                s6 = peg$c5;
                // @ts-ignore
                peg$currPos += 13;
                // @ts-ignore
              } else {
                // @ts-ignore
                s6 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                  peg$fail(peg$e5);
                }
              }
              // @ts-ignore
              if (s6 !== peg$FAILED) {
                // @ts-ignore
                s7 = peg$parseVersionNumber();
                // @ts-ignore
                if (s7 !== peg$FAILED) {
                  // @ts-ignore
                  peg$savedPos = s0;
                  // @ts-ignore
                  s0 = peg$f2(s4, s7);
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseVersionNumber() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = [];
        // @ts-ignore
        if (peg$r0.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s2 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s2 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e6);
          }
        }
        // @ts-ignore
        if (s2 !== peg$FAILED) {
          // @ts-ignore
          while (s2 !== peg$FAILED) {
            // @ts-ignore
            s1.push(s2);
            // @ts-ignore
            if (peg$r0.test(input.charAt(peg$currPos))) {
              // @ts-ignore
              s2 = input.charAt(peg$currPos);
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s2 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e6);
              }
            }
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f3(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseLicenseText() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = [];
        // @ts-ignore
        if (peg$r1.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s2 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s2 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e7);
          }
        }
        // @ts-ignore
        while (s2 !== peg$FAILED) {
          // @ts-ignore
          s1.push(s2);
          // @ts-ignore
          if (peg$r1.test(input.charAt(peg$currPos))) {
            // @ts-ignore
            s2 = input.charAt(peg$currPos);
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s2 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e7);
            }
          }
        }
        // @ts-ignore
        peg$savedPos = s0;
        // @ts-ignore
        s1 = peg$f4(s1);
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseObjectDefinition() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseObject();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s0 = peg$f5(s1);
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseObject() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        s0 = peg$parseLine();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parseRectangle();
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            s0 = peg$parseArc();
            // @ts-ignore
            if (s0 === peg$FAILED) {
              // @ts-ignore
              s0 = peg$parseText();
              // @ts-ignore
              if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parsePolygon();
                // @ts-ignore
                if (s0 === peg$FAILED) {
                  // @ts-ignore
                  s0 = peg$parseWire();
                  // @ts-ignore
                  if (s0 === peg$FAILED) {
                    // @ts-ignore
                    s0 = peg$parseComponent();
                    // @ts-ignore
                    if (s0 === peg$FAILED) {
                      // @ts-ignore
                      s0 = peg$parseSpice();
                      // @ts-ignore
                      if (s0 === peg$FAILED) {
                        // @ts-ignore
                        s0 = peg$parseVerilog();
                        // @ts-ignore
                        if (s0 === peg$FAILED) {
                          // @ts-ignore
                          s0 = peg$parseVHDL();
                          // @ts-ignore
                          if (s0 === peg$FAILED) {
                            // @ts-ignore
                            s0 = peg$parseTEDAx();
                            // @ts-ignore
                            if (s0 === peg$FAILED) {
                              // @ts-ignore
                              s0 = peg$parseGlobalProperties();
                              // @ts-ignore
                              if (s0 === peg$FAILED) {
                                // @ts-ignore
                                s0 = peg$parseEmbeddedSymbol();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseSpice() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 83) {
          // @ts-ignore
          s1 = peg$c6;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e8);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseCurlyBracedString();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f6(s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseVerilog() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 86) {
          // @ts-ignore
          s1 = peg$c7;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e9);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseCurlyBracedString();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f7(s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseVHDL() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 71) {
          // @ts-ignore
          s1 = peg$c8;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e10);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseCurlyBracedString();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f8(s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseTEDAx() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 69) {
          // @ts-ignore
          s1 = peg$c9;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e11);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseCurlyBracedString();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f9(s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseGlobalProperties() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 75) {
          // @ts-ignore
          s1 = peg$c10;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e12);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseProperties();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f10(s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseCurlyBracedString() {
        // @ts-ignore
        var s0, s1, s2, s3, s4;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 123) {
          // @ts-ignore
          s1 = peg$c1;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e1);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = [];
          // @ts-ignore
          s4 = peg$parseEscape();
          // @ts-ignore
          if (s4 === peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseNotEscape();
          }
          // @ts-ignore
          while (s4 !== peg$FAILED) {
            // @ts-ignore
            s3.push(s4);
            // @ts-ignore
            s4 = peg$parseEscape();
            // @ts-ignore
            if (s4 === peg$FAILED) {
              // @ts-ignore
              s4 = peg$parseNotEscape();
            }
          }
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 125) {
            // @ts-ignore
            s4 = peg$c2;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s4 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e2);
            }
          }
          // @ts-ignore
          if (s4 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f11(s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseEscape() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 92) {
          // @ts-ignore
          s1 = peg$c11;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e13);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 92) {
            // @ts-ignore
            s2 = peg$c11;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s2 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e13);
            }
          }
          // @ts-ignore
          if (s2 === peg$FAILED) {
            // @ts-ignore
            if (input.charCodeAt(peg$currPos) === 123) {
              // @ts-ignore
              s2 = peg$c1;
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s2 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e1);
              }
            }
            // @ts-ignore
            if (s2 === peg$FAILED) {
              // @ts-ignore
              if (input.charCodeAt(peg$currPos) === 125) {
                // @ts-ignore
                s2 = peg$c2;
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
              } else {
                // @ts-ignore
                s2 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
            }
          }
          // @ts-ignore
          if (s2 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f12(s2);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseNotEscape() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = [];
        // @ts-ignore
        if (peg$r2.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s2 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s2 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e14);
          }
        }
        // @ts-ignore
        if (s2 !== peg$FAILED) {
          // @ts-ignore
          while (s2 !== peg$FAILED) {
            // @ts-ignore
            s1.push(s2);
            // @ts-ignore
            if (peg$r2.test(input.charAt(peg$currPos))) {
              // @ts-ignore
              s2 = input.charAt(peg$currPos);
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s2 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e14);
              }
            }
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f13();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseProperties() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 123) {
          // @ts-ignore
          s1 = peg$c1;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e1);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$currPos;
          // @ts-ignore
          s4 = peg$parsePair();
          // @ts-ignore
          if (s4 !== peg$FAILED) {
            // @ts-ignore
            s5 = [];
            // @ts-ignore
            s6 = peg$currPos;
            // @ts-ignore
            s7 = peg$parse_();
            // @ts-ignore
            s8 = peg$parsePair();
            // @ts-ignore
            if (s8 !== peg$FAILED) {
              // @ts-ignore
              s7 = [s7, s8];
              // @ts-ignore
              s6 = s7;
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s6;
              // @ts-ignore
              s6 = peg$FAILED;
            }
            // @ts-ignore
            while (s6 !== peg$FAILED) {
              // @ts-ignore
              s5.push(s6);
              // @ts-ignore
              s6 = peg$currPos;
              // @ts-ignore
              s7 = peg$parse_();
              // @ts-ignore
              s8 = peg$parsePair();
              // @ts-ignore
              if (s8 !== peg$FAILED) {
                // @ts-ignore
                s7 = [s7, s8];
                // @ts-ignore
                s6 = s7;
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s6;
                // @ts-ignore
                s6 = peg$FAILED;
              }
            }
            // @ts-ignore
            s4 = [s4, s5];
            // @ts-ignore
            s3 = s4;
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s3;
            // @ts-ignore
            s3 = peg$FAILED;
          }
          // @ts-ignore
          if (s3 === peg$FAILED) {
            // @ts-ignore
            s3 = null;
          }
          // @ts-ignore
          s4 = peg$parse_();
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 125) {
            // @ts-ignore
            s5 = peg$c2;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s5 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e2);
            }
          }
          // @ts-ignore
          if (s5 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f14(s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePair() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parsePropertyName();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 61) {
            // @ts-ignore
            s3 = peg$c12;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s3 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e15);
            }
          }
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parse_();
            // @ts-ignore
            s5 = peg$parsePropertyValue();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              peg$savedPos = s0;
              // @ts-ignore
              s0 = peg$f15(s1, s5);
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$currPos;
          // @ts-ignore
          s1 = peg$parsePropertyName();
          // @ts-ignore
          if (s1 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s1 = peg$f16(s1);
          }
          // @ts-ignore
          s0 = s1;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePropertyName() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = [];
        // @ts-ignore
        if (peg$r3.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s2 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s2 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e16);
          }
        }
        // @ts-ignore
        if (s2 !== peg$FAILED) {
          // @ts-ignore
          while (s2 !== peg$FAILED) {
            // @ts-ignore
            s1.push(s2);
            // @ts-ignore
            if (peg$r3.test(input.charAt(peg$currPos))) {
              // @ts-ignore
              s2 = input.charAt(peg$currPos);
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s2 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e16);
              }
            }
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f17();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePropertyValue() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseQuotedString();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f18(s1);
        }
        // @ts-ignore
        s0 = s1;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parseLiteralString();
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseLiteralString() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = [];
        // @ts-ignore
        s2 = peg$parseEscape();
        // @ts-ignore
        if (s2 === peg$FAILED) {
          // @ts-ignore
          if (peg$r4.test(input.charAt(peg$currPos))) {
            // @ts-ignore
            s2 = input.charAt(peg$currPos);
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s2 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e17);
            }
          }
        }
        // @ts-ignore
        if (s2 !== peg$FAILED) {
          // @ts-ignore
          while (s2 !== peg$FAILED) {
            // @ts-ignore
            s1.push(s2);
            // @ts-ignore
            s2 = peg$parseEscape();
            // @ts-ignore
            if (s2 === peg$FAILED) {
              // @ts-ignore
              if (peg$r4.test(input.charAt(peg$currPos))) {
                // @ts-ignore
                s2 = input.charAt(peg$currPos);
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
              } else {
                // @ts-ignore
                s2 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                  peg$fail(peg$e17);
                }
              }
            }
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f19(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseQuotedString() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 34) {
          // @ts-ignore
          s1 = peg$c13;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e18);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = [];
          // @ts-ignore
          s3 = peg$parseStringEscape();
          // @ts-ignore
          if (s3 === peg$FAILED) {
            // @ts-ignore
            s3 = peg$parseStringCharacters();
          }
          // @ts-ignore
          while (s3 !== peg$FAILED) {
            // @ts-ignore
            s2.push(s3);
            // @ts-ignore
            s3 = peg$parseStringEscape();
            // @ts-ignore
            if (s3 === peg$FAILED) {
              // @ts-ignore
              s3 = peg$parseStringCharacters();
            }
          }
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 34) {
            // @ts-ignore
            s3 = peg$c13;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s3 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e18);
            }
          }
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f20(s2);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseStringCharacters() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = [];
        // @ts-ignore
        if (peg$r5.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s2 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s2 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e19);
          }
        }
        // @ts-ignore
        if (s2 !== peg$FAILED) {
          // @ts-ignore
          while (s2 !== peg$FAILED) {
            // @ts-ignore
            s1.push(s2);
            // @ts-ignore
            if (peg$r5.test(input.charAt(peg$currPos))) {
              // @ts-ignore
              s2 = input.charAt(peg$currPos);
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s2 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e19);
              }
            }
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f21();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseStringEscape() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 3) === peg$c14) {
          // @ts-ignore
          s1 = peg$c14;
          // @ts-ignore
          peg$currPos += 3;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e20);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f22();
        }
        // @ts-ignore
        s0 = s1;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$currPos;
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 92) {
            // @ts-ignore
            s1 = peg$c11;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e13);
            }
          }
          // @ts-ignore
          if (s1 !== peg$FAILED) {
            // @ts-ignore
            if (input.length > peg$currPos) {
              // @ts-ignore
              s2 = input.charAt(peg$currPos);
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s2 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e21);
              }
            }
            // @ts-ignore
            if (s2 !== peg$FAILED) {
              // @ts-ignore
              peg$savedPos = s0;
              // @ts-ignore
              s0 = peg$f23(s2);
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseLine() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 76) {
          // @ts-ignore
          s1 = peg$c15;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e22);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseInteger();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parse_();
            // @ts-ignore
            s5 = peg$parseCoordinate();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s6 = peg$parse_();
              // @ts-ignore
              s7 = peg$parseCoordinate();
              // @ts-ignore
              if (s7 !== peg$FAILED) {
                // @ts-ignore
                s8 = peg$parse_();
                // @ts-ignore
                s9 = peg$parseCoordinate();
                // @ts-ignore
                if (s9 !== peg$FAILED) {
                  // @ts-ignore
                  s10 = peg$parse_();
                  // @ts-ignore
                  s11 = peg$parseCoordinate();
                  // @ts-ignore
                  if (s11 !== peg$FAILED) {
                    // @ts-ignore
                    s12 = peg$parse_();
                    // @ts-ignore
                    s13 = peg$parseProperties();
                    // @ts-ignore
                    if (s13 !== peg$FAILED) {
                      // @ts-ignore
                      peg$savedPos = s0;
                      // @ts-ignore
                      s0 = peg$f24(s3, s5, s7, s9, s11, s13);
                      // @ts-ignore
                    } else {
                      // @ts-ignore
                      peg$currPos = s0;
                      // @ts-ignore
                      s0 = peg$FAILED;
                    }
                    // @ts-ignore
                  } else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                  }
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseRectangle() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 66) {
          // @ts-ignore
          s1 = peg$c16;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e23);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseInteger();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parse_();
            // @ts-ignore
            s5 = peg$parseCoordinate();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s6 = peg$parse_();
              // @ts-ignore
              s7 = peg$parseCoordinate();
              // @ts-ignore
              if (s7 !== peg$FAILED) {
                // @ts-ignore
                s8 = peg$parse_();
                // @ts-ignore
                s9 = peg$parseCoordinate();
                // @ts-ignore
                if (s9 !== peg$FAILED) {
                  // @ts-ignore
                  s10 = peg$parse_();
                  // @ts-ignore
                  s11 = peg$parseCoordinate();
                  // @ts-ignore
                  if (s11 !== peg$FAILED) {
                    // @ts-ignore
                    s12 = peg$parse_();
                    // @ts-ignore
                    s13 = peg$parseProperties();
                    // @ts-ignore
                    if (s13 !== peg$FAILED) {
                      // @ts-ignore
                      peg$savedPos = s0;
                      // @ts-ignore
                      s0 = peg$f25(s3, s5, s7, s9, s11, s13);
                      // @ts-ignore
                    } else {
                      // @ts-ignore
                      peg$currPos = s0;
                      // @ts-ignore
                      s0 = peg$FAILED;
                    }
                    // @ts-ignore
                  } else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                  }
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePolygon() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 80) {
          // @ts-ignore
          s1 = peg$c17;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e25);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseInteger();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parse_();
            // @ts-ignore
            s5 = peg$parseInteger();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s6 = peg$parse_();
              // @ts-ignore
              s7 = peg$parsePoints();
              // @ts-ignore
              if (s7 !== peg$FAILED) {
                // @ts-ignore
                s8 = peg$parse_();
                // @ts-ignore
                s9 = peg$parseProperties();
                // @ts-ignore
                if (s9 !== peg$FAILED) {
                  // @ts-ignore
                  peg$savedPos = s0;
                  // @ts-ignore
                  s0 = peg$f26(s3, s5, s7, s9);
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e24);
          }
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePoints() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseCoordinatePair();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = [];
          // @ts-ignore
          s3 = peg$currPos;
          // @ts-ignore
          s4 = peg$parse_();
          // @ts-ignore
          s5 = peg$parseCoordinatePair();
          // @ts-ignore
          if (s5 !== peg$FAILED) {
            // @ts-ignore
            s4 = [s4, s5];
            // @ts-ignore
            s3 = s4;
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s3;
            // @ts-ignore
            s3 = peg$FAILED;
          }
          // @ts-ignore
          while (s3 !== peg$FAILED) {
            // @ts-ignore
            s2.push(s3);
            // @ts-ignore
            s3 = peg$currPos;
            // @ts-ignore
            s4 = peg$parse_();
            // @ts-ignore
            s5 = peg$parseCoordinatePair();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s4 = [s4, s5];
              // @ts-ignore
              s3 = s4;
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s3;
              // @ts-ignore
              s3 = peg$FAILED;
            }
          }
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s0 = peg$f27(s1, s2);
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseCoordinatePair() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseCoordinate();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseCoordinate();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f28(s1, s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseArc() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 65) {
          // @ts-ignore
          s1 = peg$c18;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e26);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseInteger();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parse_();
            // @ts-ignore
            s5 = peg$parseCoordinate();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s6 = peg$parse_();
              // @ts-ignore
              s7 = peg$parseCoordinate();
              // @ts-ignore
              if (s7 !== peg$FAILED) {
                // @ts-ignore
                s8 = peg$parse_();
                // @ts-ignore
                s9 = peg$parseCoordinate();
                // @ts-ignore
                if (s9 !== peg$FAILED) {
                  // @ts-ignore
                  s10 = peg$parse_();
                  // @ts-ignore
                  s11 = peg$parseAngle();
                  // @ts-ignore
                  if (s11 !== peg$FAILED) {
                    // @ts-ignore
                    s12 = peg$parse_();
                    // @ts-ignore
                    s13 = peg$parseAngle();
                    // @ts-ignore
                    if (s13 !== peg$FAILED) {
                      // @ts-ignore
                      s14 = peg$parse_();
                      // @ts-ignore
                      s15 = peg$parseProperties();
                      // @ts-ignore
                      if (s15 !== peg$FAILED) {
                        // @ts-ignore
                        peg$savedPos = s0;
                        // @ts-ignore
                        s0 = peg$f29(s3, s5, s7, s9, s11, s13, s15);
                        // @ts-ignore
                      } else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                      }
                      // @ts-ignore
                    } else {
                      // @ts-ignore
                      peg$currPos = s0;
                      // @ts-ignore
                      s0 = peg$FAILED;
                    }
                    // @ts-ignore
                  } else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                  }
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseText() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 84) {
          // @ts-ignore
          s1 = peg$c19;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e27);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseCurlyBracedString();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parse_();
            // @ts-ignore
            s5 = peg$parseCoordinate();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s6 = peg$parse_();
              // @ts-ignore
              s7 = peg$parseCoordinate();
              // @ts-ignore
              if (s7 !== peg$FAILED) {
                // @ts-ignore
                s8 = peg$parse_();
                // @ts-ignore
                s9 = peg$parseInteger();
                // @ts-ignore
                if (s9 !== peg$FAILED) {
                  // @ts-ignore
                  s10 = peg$parse_();
                  // @ts-ignore
                  s11 = peg$parseInteger();
                  // @ts-ignore
                  if (s11 !== peg$FAILED) {
                    // @ts-ignore
                    s12 = peg$parse_();
                    // @ts-ignore
                    s13 = peg$parseFloat();
                    // @ts-ignore
                    if (s13 !== peg$FAILED) {
                      // @ts-ignore
                      s14 = peg$parse_();
                      // @ts-ignore
                      s15 = peg$parseFloat();
                      // @ts-ignore
                      if (s15 !== peg$FAILED) {
                        // @ts-ignore
                        s16 = peg$parse_();
                        // @ts-ignore
                        s17 = peg$parseProperties();
                        // @ts-ignore
                        if (s17 !== peg$FAILED) {
                          // @ts-ignore
                          peg$savedPos = s0;
                          // @ts-ignore
                          s0 = peg$f30(s3, s5, s7, s9, s11, s13, s15, s17);
                          // @ts-ignore
                        } else {
                          // @ts-ignore
                          peg$currPos = s0;
                          // @ts-ignore
                          s0 = peg$FAILED;
                        }
                        // @ts-ignore
                      } else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                      }
                      // @ts-ignore
                    } else {
                      // @ts-ignore
                      peg$currPos = s0;
                      // @ts-ignore
                      s0 = peg$FAILED;
                    }
                    // @ts-ignore
                  } else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                  }
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseWire() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 78) {
          // @ts-ignore
          s1 = peg$c20;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e28);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseCoordinate();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parse_();
            // @ts-ignore
            s5 = peg$parseCoordinate();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s6 = peg$parse_();
              // @ts-ignore
              s7 = peg$parseCoordinate();
              // @ts-ignore
              if (s7 !== peg$FAILED) {
                // @ts-ignore
                s8 = peg$parse_();
                // @ts-ignore
                s9 = peg$parseCoordinate();
                // @ts-ignore
                if (s9 !== peg$FAILED) {
                  // @ts-ignore
                  s10 = peg$parse_();
                  // @ts-ignore
                  s11 = peg$parseProperties();
                  // @ts-ignore
                  if (s11 !== peg$FAILED) {
                    // @ts-ignore
                    peg$savedPos = s0;
                    // @ts-ignore
                    s0 = peg$f31(s3, s5, s7, s9, s11);
                    // @ts-ignore
                  } else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                  }
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseComponent() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 67) {
          // @ts-ignore
          s1 = peg$c21;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e29);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseCurlyBracedString();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parse_();
            // @ts-ignore
            s5 = peg$parseCoordinate();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s6 = peg$parse_();
              // @ts-ignore
              s7 = peg$parseCoordinate();
              // @ts-ignore
              if (s7 !== peg$FAILED) {
                // @ts-ignore
                s8 = peg$parse_();
                // @ts-ignore
                s9 = peg$parseInteger();
                // @ts-ignore
                if (s9 !== peg$FAILED) {
                  // @ts-ignore
                  s10 = peg$parse_();
                  // @ts-ignore
                  s11 = peg$parseInteger();
                  // @ts-ignore
                  if (s11 !== peg$FAILED) {
                    // @ts-ignore
                    s12 = peg$parse_();
                    // @ts-ignore
                    s13 = peg$parseProperties();
                    // @ts-ignore
                    if (s13 !== peg$FAILED) {
                      // @ts-ignore
                      peg$savedPos = s0;
                      // @ts-ignore
                      s0 = peg$f32(s3, s5, s7, s9, s11, s13);
                      // @ts-ignore
                    } else {
                      // @ts-ignore
                      peg$currPos = s0;
                      // @ts-ignore
                      s0 = peg$FAILED;
                    }
                    // @ts-ignore
                  } else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                  }
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseEmbeddedSymbol() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 91) {
          // @ts-ignore
          s1 = peg$c22;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e30);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parse_();
          // @ts-ignore
          s3 = peg$parseStart();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parse_();
            // @ts-ignore
            if (input.charCodeAt(peg$currPos) === 93) {
              // @ts-ignore
              s5 = peg$c23;
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s5 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e31);
              }
            }
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              peg$savedPos = s0;
              // @ts-ignore
              s0 = peg$f33(s3);
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseCoordinate() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseFloat();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f34(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseAngle() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseFloat();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f35(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseFloat() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 45) {
          // @ts-ignore
          s1 = peg$c24;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e32);
          }
        }
        // @ts-ignore
        if (s1 === peg$FAILED) {
          // @ts-ignore
          s1 = null;
        }
        // @ts-ignore
        s2 = [];
        // @ts-ignore
        if (peg$r6.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s3 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s3 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e33);
          }
        }
        // @ts-ignore
        if (s3 !== peg$FAILED) {
          // @ts-ignore
          while (s3 !== peg$FAILED) {
            // @ts-ignore
            s2.push(s3);
            // @ts-ignore
            if (peg$r6.test(input.charAt(peg$currPos))) {
              // @ts-ignore
              s3 = input.charAt(peg$currPos);
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s3 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e33);
              }
            }
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          s2 = peg$FAILED;
        }
        // @ts-ignore
        if (s2 !== peg$FAILED) {
          // @ts-ignore
          s3 = peg$currPos;
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 46) {
            // @ts-ignore
            s4 = peg$c25;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s4 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e34);
            }
          }
          // @ts-ignore
          if (s4 !== peg$FAILED) {
            // @ts-ignore
            s5 = [];
            // @ts-ignore
            if (peg$r6.test(input.charAt(peg$currPos))) {
              // @ts-ignore
              s6 = input.charAt(peg$currPos);
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s6 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e33);
              }
            }
            // @ts-ignore
            if (s6 !== peg$FAILED) {
              // @ts-ignore
              while (s6 !== peg$FAILED) {
                // @ts-ignore
                s5.push(s6);
                // @ts-ignore
                if (peg$r6.test(input.charAt(peg$currPos))) {
                  // @ts-ignore
                  s6 = input.charAt(peg$currPos);
                  // @ts-ignore
                  peg$currPos++;
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  s6 = peg$FAILED;
                  // @ts-ignore
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e33);
                  }
                }
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              s5 = peg$FAILED;
            }
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s4 = [s4, s5];
              // @ts-ignore
              s3 = s4;
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s3;
              // @ts-ignore
              s3 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s3;
            // @ts-ignore
            s3 = peg$FAILED;
          }
          // @ts-ignore
          if (s3 === peg$FAILED) {
            // @ts-ignore
            s3 = null;
          }
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s0 = peg$f36();
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseInteger() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 45) {
          // @ts-ignore
          s1 = peg$c24;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e32);
          }
        }
        // @ts-ignore
        if (s1 === peg$FAILED) {
          // @ts-ignore
          s1 = null;
        }
        // @ts-ignore
        s2 = [];
        // @ts-ignore
        if (peg$r6.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s3 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s3 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e33);
          }
        }
        // @ts-ignore
        if (s3 !== peg$FAILED) {
          // @ts-ignore
          while (s3 !== peg$FAILED) {
            // @ts-ignore
            s2.push(s3);
            // @ts-ignore
            if (peg$r6.test(input.charAt(peg$currPos))) {
              // @ts-ignore
              s3 = input.charAt(peg$currPos);
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s3 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e33);
              }
            }
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          s2 = peg$FAILED;
        }
        // @ts-ignore
        if (s2 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s0 = peg$f37();
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parse_() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        s0 = [];
        // @ts-ignore
        if (peg$r7.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s1 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e35);
          }
        }
        // @ts-ignore
        while (s1 !== peg$FAILED) {
          // @ts-ignore
          s0.push(s1);
          // @ts-ignore
          if (peg$r7.test(input.charAt(peg$currPos))) {
            // @ts-ignore
            s1 = input.charAt(peg$currPos);
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e35);
            }
          }
        }

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      peg$result = peg$startRuleFunction();

      // @ts-ignore
      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        // @ts-ignore
        return peg$result;
        // @ts-ignore
      } else {
        // @ts-ignore
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          // @ts-ignore
          peg$fail(peg$endExpectation());
        }

        // @ts-ignore
        throw peg$buildStructuredError(
          // @ts-ignore
          peg$maxFailExpected,
          // @ts-ignore
          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
          // @ts-ignore
          peg$maxFailPos < input.length
            ? // @ts-ignore
              peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : // @ts-ignore
              peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
        );
      }
    }

    // @ts-ignore
    return {
      SyntaxError: peg$SyntaxError,
      parse: peg$parse,
    };
  })();

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: 'literal';
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: 'class';
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: 'any';
}

export interface EndExpectation {
  type: 'end';
}

export interface OtherExpectation {
  type: 'other';
  description: string;
}

export type Expectation =
  | LiteralExpectation
  | ClassExpectation
  | AnyExpectation
  | EndExpectation
  | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(
    sources: {
      source?: any;
      text: string;
    }[],
  ): string;
}

export interface TraceEvent {
  type: string;
  rule: string;
  result?: any;
  location: FileRange;
}

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = 'PeggySyntaxError';

export interface ParseOptions {
  filename?: string;
  startRule?: 'Start';
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
  input: string,
  options?: Options,
) => Options extends { startRule: infer StartRule }
  ? StartRule extends 'Start'
    ? Start
    : Start
  : Start;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Start = [...NonNullable<VersionObject | null>[], ...ObjectDefinition[]];
export type VersionObject = { type: 'Version' } & VersionString & {
    license: LicenseText;
  };
export type VersionString = {
  version: VersionNumber;
  fileVersion: VersionNumber;
};
export type VersionNumber = string;
export type LicenseText = string;
export type ObjectDefinition = Object_1;
export type Object_1 =
  | Line
  | Rectangle
  | Arc
  | Text
  | Polygon
  | Wire
  | Component
  | Spice
  | Verilog
  | VHDL
  | TEDAx
  | GlobalProperties
  | EmbeddedSymbol;
export type Spice = { type: 'Spice'; content: CurlyBracedString };
export type Verilog = { type: 'Verilog'; content: CurlyBracedString };
export type VHDL = { type: 'VHDL'; content: CurlyBracedString };
export type TEDAx = { type: 'TEDAx'; content: CurlyBracedString };
export type GlobalProperties = {
  type: 'GlobalProperties';
  properties: Properties;
};
export type CurlyBracedString = string;
export type Escape = '\\' | '{' | '}';
export type NotEscape = string;
export type Properties = Record<string, string>;
export type Pair = [PropertyName, PropertyValue] | [];
export type PropertyName = string;
export type PropertyValue = any | LiteralString;
export type LiteralString = string;
export type QuotedString = string;
export type StringCharacters = string;
export type StringEscape = '\\"' | string;
export type Line = {
  type: 'Line';
  layer: Integer;
  x1: Coordinate;
  y1: Coordinate;
  x2: Coordinate;
  y2: Coordinate;
  properties: Properties;
};
export type Rectangle = {
  type: 'Rectangle';
  layer: Integer;
  x1: Coordinate;
  y1: Coordinate;
  x2: Coordinate;
  y2: Coordinate;
  properties: Properties;
};
export type Polygon = {
  type: 'Polygon';
  layer: Integer;
  points: Points;
  properties: Properties;
};
export type Points = CoordinatePair[];
export type CoordinatePair = { x: Coordinate; y: Coordinate };
export type Arc = {
  type: 'Arc';
  layer: Integer;
  centerX: Coordinate;
  centerY: Coordinate;
  radius: Coordinate;
  startAngle: Angle;
  sweepAngle: Angle;
  properties: Properties;
};
export type Text = {
  type: 'Text';
  text: CurlyBracedString;
  x: Coordinate;
  y: Coordinate;
  rotation: Integer;
  mirror: Integer;
  hSize: Float;
  vSize: Float;
  properties: Properties;
};
export type Wire = {
  type: 'Wire';
  x1: Coordinate;
  y1: Coordinate;
  x2: Coordinate;
  y2: Coordinate;
  properties: Properties;
};
export type Component = {
  type: 'Component';
  symbolReference: CurlyBracedString;
  x: Coordinate;
  y: Coordinate;
  rotation: Integer;
  flip: Integer;
  properties: Properties;
};
export type EmbeddedSymbol = { type: 'EmbeddedSymbol'; symbol: Start };
export type Coordinate = number;
export type Angle = number;
export type Float = number;
export type Integer = number;
export type _ = string[];
